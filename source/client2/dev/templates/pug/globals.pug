//- Este archivo contiene un conjunto de utiles mixins que se pueden utilizar en
//- todas las plantillas Pug del proyecto para facilitar la programacion
//- Declaramos una variable que contenga los URLs de las carpetas de interes del
//- proyecto
- 
  var dir = { root: '../' };
  dir.modules = dir.root + 'node_modules/';
  dir.templates = dir.root + 'templates/';
  dir.components = dir.root + 'components/';
  dir.assets = dir.root + 'assets/';
  dir.stylesheets = dir.root + 'stylesheets/';

//- Crea una barra de navegacion
//- [in]  config (object): el objeto que especifica la estructura
//-       de la barra de navegacion, esta debe contener el siguiente formato:
//-       sideNavButton (object) {
//-         id (string): el ID HTML del boton que activara el menu lateral, 
//-           debe escribirse con triples comillas, "'ejemplo'"
//-         icon (string): las clase de icono que va a ser desplegado en el 
//-           boton 
//-       }
//-       styleClass (string): las clases que se le seran aplicadas a la barra 
//-         de navegacion, deben contener comillas dobles y sencillas asi: 
//-         "'ejemplo'"
mixin navBar(config)
  mz-navbar('[navbarClass]'=config.styleClass)
    if config.sideNavButton
      mz-navbar-item-container('[align]'="'left'")
        if config.sideNavButton.showFlag
          mz-navbar-item
            a(
              '[id]'=config.sideNavButton.id
              '*ngIf'=config.sideNavButton.showFlag
            )
              i(class=config.sideNavButton.icon)
        else
          mz-navbar-item 
            a('[id]'=config.sideNavButton.id)
              i(class=config.sideNavButton.icon)
    if block
      mz-navbar-item-container('[align]'="'right'")
        block

//- Crea un enlace
//- [in]  destination (string): la URL a donde navegara el usuario al hacer 
//-       clic sobre el enlace
mixin link(destination = '#')
  a(href=destination)&attributes(attributes)
    block

//- Crean un enlace de UI-Router
//- [in]  destination (string): el nombre del estado a donde navegara el 
//-       usuario al hacer clic sobre el enlace
mixin uiRouterLink(destination)
  a(uiSref=destination)
    block

//- Crea un menu de navegacion lateral
//- [in]  name (string): el ID HTML que sera asociado al menu lateral, debe 
//-       estar escrito con triples comillas, "'ejemplo'"
//- [in]  collapseButtonId (string): el ID HTML del boton que activa y 
//-       desactiva el menu lateral, debe estar escrito con triples comillas, 
//-       "'ejemplo'"
mixin sideNav(name, collapseButtonId)
  mz-sidenav(
    '[id]'=name
    '[collapseButtonId]'=collapseButtonId
  )&attributes(attributes)
    block

//- Crea un menu colapsable como elemento de un menu lateral
//- [in]  config (object): el objeto que especifica la estructura del menu 
//-       colapsable, debe contener el siguiente formato:
//-       title (object) {
//-         icon (string): la clase de icono que va a ser desplegado junto al 
//-           titulo del menu colapsable
//-         text (string): el texto a desplegar como el titulo del menu 
//-           colapsable
//-       }
//-       items (array) {
//-         type (string): el tipo de elemento que sera añadido dentro del menu 
//-           colapsable, debe ser uno de las siguientes opciones:
//-           - hyperlink: un enlace HTML
//-           - uiRouterLink: un enlace de UI-Router
//-         destination (string): el destino a donde navegara el usuario al 
//-           hacerle clic a la opcion
//-         text (string): el texto a desplegar como el nombre de la opcion del 
//-           menu colapsable
//-       }
mixin sideNavCollapsible(config)
  mz-sidenav-collapsible&attributes(attributes)
    mz-sidenav-collapsible-header
      if config.title.icon
        i(class=config.title.icon)
      =config.title.text
    mz-sidenav-collapsible-content
      each item in config.items
        mz-sidenav-link
          case item.type
            when 'hyperlink'
              +link(item.destination)
                =item.text
            when 'uiRouterLink'
              +uiRouterLink(item.destination)
                =item.text

//- Crea un campo de texto
//- [in]  model (string): el nombre del modelo del componente angular 2
//- [in]  name (string): el nombre del campo dentro del formulario de captura 
//-       de la pagina
//- [in]  label (string): el nombre del campo a desplegar en el formulario
//- [in]  icon (string): el icono a desplegar junto con el campo de texto
mixin textInput(model, name, label, icon = null)
  mz-input-container
    if icon
      i(class=icon mz-input-prefix)
    input(
      type='text'
      id=name
      name=name
      formControlName=model
      '[label]'=label
      mz-input
    )&attributes(attributes)

//- Crea un campo de contraseña
//- [in]  model (string): el nombre del modelo del componente angular 2
//- [in]  name (string): el nombre del campo dentro del formulario de captura 
//-       de la pagina
//- [in]  label (string): el nombre del campo a desplegar en el formulario
//- [in]  icon (string): el icono a desplegar junto con el campo de contraseña
//- '[(ngModel)]'=model
mixin passwordInput(model, name, label, icon = null)
  mz-input-container
    if icon
      i(class=icon mz-input-prefix)
    input(
      type='password'
      id=name
      name=name
      formControlName=model
      '[label]'=label
      mz-input
    )&attributes(attributes)

//- Crea un boton
//- [in]  type (string): el tipo del boton que va a ser desplegado
//- [in]  name (string): el nombre del boton que va a tener en el formulario
//- [in]  text (string): el texto a desplegar dentro del boton
mixin button(type, name, text)
  button(
    id=name
    type=type
    mz-button
  )&attributes(attributes)=text

//- Crea un menu de cascada
//- [in]  name (string): el ID HTML que identificara este menu, debe ser 
//-       escrito con comillas triples, "'ejemplo'"
//- [in]  buttonId (string): el ID HTML del boton que activa la cascada,
//-       debe ser escrito con comillas triples, "'ejemplo'"
//- [in]  items (array<objects>): la lista de opciones que apareceran dentro 
//-       del menu de cascada, estos deben tener el sig. formato:
//-       name (string): el texto a desplegar como el nombre de la opcion
mixin dropdownMenu(name, buttonId, items)
  mz-dropdown(
    '[id]'=name,
    '[belowOrigin]'="true"
    '[dropdownButtonId]'=buttonId
  )
    each item in items
      mz-dropdown-item
        a(href='#')
          =item.name

//- Crea una lista de seleccion
//- [in]  name (string): el ID HTML con la que sera identificada la lista de 
//-       seleccion, debe tener comillas triples, "'ejemplo'"
//- [in]  placeholder (string): el texto a desplegar como nombre de la lista de 
//-       seleccion, debe tener comillas triples, "'ejemplo'"
//- [in]  options (array<string>): la lista de opciones que seran desplegadas 
//-       dentro de la lista de seleccion
mixin select(name, placeholder, options)
  mz-select-container&attributes(attributes)
    select(
      id=name,
      '[placeholder]'=placeholder
      mz-select
    )
      each option in options
        option
          =option